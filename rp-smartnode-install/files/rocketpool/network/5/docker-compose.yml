version: "3.7"
services:
  traefik:
    image: traefik:v1.7.21
    command: [
      "--api",
      "--docker",
      "--docker.watch",
      "--docker.domain=smartnode.localhost",
    ]
    restart: always
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    networks:
      net:
        aliases:
          - "eth1.rpc.smartnode.localhost"
          - "eth2.api.smartnode.localhost"
  pow:
    image: ${POW_IMAGE}
    restart: on-failure
    ports:
      - "30303-30305:30303-30305/udp"
      - "30303:30303/tcp"
    volumes:
      - eth1clientdata:/ethclient
      - ./chains/eth1:/setup:ro
    networks:
      - net
    environment:
      - CLIENT=${POW_CLIENT}
      - ETHSTATS_LABEL=${ETHSTATS_LABEL}
      - ETHSTATS_LOGIN=${ETHSTATS_LOGIN}
      - INFURA_PROJECT_ID=${INFURA_PROJECT_ID}
    entrypoint: /setup/start-node.sh
    labels:
      - traefik.enable=true
      - traefik.port=8545
      - traefik.docker.network=${COMPOSE_PROJECT_NAME}_net
      - traefik.frontend.priority=10
      - traefik.frontend.rule=Host:eth1.rpc.smartnode.localhost
      - traefik.backend.loadbalancer.stickiness=true
      - traefik.backend.loadbalancer.stickiness.cookieName=smartnodeEth1
      - traefik.backend.loadbalancer.method=drr
      - traefik.backend=eth1.rpc.smartnode
    depends_on:
      - traefik
  beacon:
    image: ${BEACON_IMAGE}
    restart: on-failure
    ports:
      - "9001:9001"
    volumes:
      - eth2clientdata:/ethclient
      - ./chains/eth2:/setup:ro
    networks:
      - net
    environment:
      - CLIENT=${BEACON_CLIENT}
    entrypoint: /setup/start-beacon.sh
    labels:
      - traefik.enable=true
      - traefik.port=5052
      - traefik.docker.network=${COMPOSE_PROJECT_NAME}_net
      - traefik.frontend.priority=10
      - traefik.frontend.rule=Host:eth2.api.smartnode.localhost
      - traefik.backend.loadbalancer.stickiness=true
      - traefik.backend.loadbalancer.stickiness.cookieName=smartnodeEth2
      - traefik.backend.loadbalancer.method=drr
      - traefik.backend=eth2.api.smartnode
    depends_on:
      - pow
  validator:
    image: ${VALIDATOR_IMAGE}
    restart: on-failure
    volumes:
      - ${RP_PATH}:/.rocketpool
      - ./chains/eth2:/setup:ro
    networks:
      - net
    environment:
      - CLIENT=${VALIDATOR_CLIENT}
    entrypoint: /setup/start-validator.sh
    depends_on:
      - beacon
  cli:
    image: rocketpool/smartnode:v0.0.1
    restart: on-failure
    volumes:
      - ${RP_PATH}:/.rocketpool
    networks:
      - net
    depends_on:
      - pow
    entrypoint: /bin/sleep
    command: "infinity"
  node:
    image: rocketpool/smartnode:v0.0.1
    restart: on-failure
    volumes:
      - ${RP_PATH}:/.rocketpool
    networks:
      - net
    command: "node"
    depends_on:
      - pow
  minipools:
    image: rocketpool/smartnode:v0.0.1
    restart: on-failure
    volumes:
      - ${RP_PATH}:/.rocketpool
      - /var/run/docker.sock:/var/run/docker.sock
    networks:
      - net
    command: "minipools"
    depends_on:
      - pow
      - beacon
  watchtower:
    image: rocketpool/smartnode:v0.0.1
    restart: on-failure
    volumes:
      - ${RP_PATH}:/.rocketpool
    networks:
      - net
    command: "watchtower"
    depends_on:
      - pow
      - beacon
networks:
  net:
volumes:
  eth1clientdata:
  eth2clientdata:
