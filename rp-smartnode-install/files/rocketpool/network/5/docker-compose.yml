version: "3.7"
services:
  traefik:
    image: traefik:v1.7.16
    command: [
      "--api",
      "--docker",
      "--docker.watch",
      "--docker.domain=smartnode.localhost",
    ]
    restart: always
    ports:
      - "8080:8080"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    networks:
      net:
        aliases:
          - "eth1.rpc.smartnode.localhost"
          - "eth2.api.smartnode.localhost"
  pow:
    image: ${POW_IMAGE}
    restart: on-failure
    ports:
      - "30303-30305:30303-30305/udp"
      - "30303:30303/tcp"
    volumes:
      - eth1clientdata:/ethclient
      - ./chains/eth1:/setup:ro
    networks:
      - net
    environment:
      - CLIENT=${POW_CLIENT}
      - ETHSTATSLABEL=${POW_ETHSTATS_LABEL}
      - ETHSTATSLOGIN=${POW_ETHSTATS_LOGIN}
    entrypoint: /setup/start-node.sh
    labels:
      - traefik.enable=true
      - traefik.port=8545
      - traefik.docker.network=${COMPOSE_PROJECT_NAME}_net
      - traefik.frontend.priority=10
      - traefik.frontend.rule=Host:eth1.rpc.smartnode.localhost
      - traefik.backend.loadbalancer.stickiness=true
      - traefik.backend.loadbalancer.stickiness.cookieName=smartnodeEth1
      - traefik.backend.loadbalancer.method=drr
      - traefik.backend=eth1.rpc.smartnode
    depends_on:
      - traefik
  beacon:
    image: ${BEACON_IMAGE}
    restart: on-failure
    volumes:
      - eth2clientdata:/ethclient
      - ./chains/eth2:/setup:ro
    networks:
      - net
    environment:
      - CLIENT=${BEACON_CLIENT}
    entrypoint: /setup/start-beacon.sh
    labels:
      - traefik.enable=true
      - traefik.port=5052
      - traefik.docker.network=${COMPOSE_PROJECT_NAME}_net
      - traefik.frontend.priority=10
      - traefik.frontend.rule=Host:eth2.api.smartnode.localhost
      - traefik.backend.loadbalancer.stickiness=true
      - traefik.backend.loadbalancer.stickiness.cookieName=smartnodeEth2
      - traefik.backend.loadbalancer.method=drr
      - traefik.backend=eth2.api.smartnode
    depends_on:
      - traefik
  validator:
    image: ${VALIDATOR_IMAGE}
    restart: on-failure
    volumes:
      - ${RP_PATH}:/.rocketpool
      - ./chains/eth2:/setup:ro
    networks:
      - net
    environment:
      - CLIENT=${VALIDATOR_CLIENT}
    entrypoint: /setup/start-validator.sh
    depends_on:
      - beacon
  #api:
  #  image: rocketpool/smartnode-api:v0.0.1
  #  restart: on-failure
  #  volumes:
  #    - ${RP_PATH}:/.rocketpool
  #  networks:
  #    - net
  #  depends_on:
  #    - pow
  #  entrypoint: /bin/sh
  #  tty: true
  #cli:
  #  image: rocketpool/smartnode-cli:v0.0.1
  #  restart: on-failure
  #  volumes:
  #    - ${RP_PATH}:/.rocketpool
  #  networks:
  #    - net
  #  depends_on:
  #    - pow
  #  entrypoint: /bin/sh
  #  tty: true
  #minipools:
  #  image: rocketpool/smartnode-minipools:v0.0.1
  #  restart: on-failure
  #  volumes:
  #    - ${RP_PATH}:/.rocketpool
  #    - /var/run/docker.sock:/var/run/docker.sock
  #  networks:
  #    - net
  #  command: [
  #    "${RP_PATH}",
  #    "rocketpool/smartnode-minipool:v0.0.1",
  #    "${COMPOSE_PROJECT_NAME}_minipool_",
  #    "${COMPOSE_PROJECT_NAME}_net",
  #  ]
  #  depends_on:
  #    - pow
  #node:
  #  image: rocketpool/smartnode-node:v0.0.1
  #  restart: on-failure
  #  volumes:
  #    - ${RP_PATH}:/.rocketpool
  #  networks:
  #    - net
  #  depends_on:
  #    - pow
  #watchtower:
  #  image: rocketpool/smartnode-watchtower:v0.0.1
  #  restart: on-failure
  #  volumes:
  #    - ${RP_PATH}:/.rocketpool
  #  networks:
  #    - net
  #  depends_on:
  #    - pow
networks:
  net:
volumes:
  eth1clientdata:
  eth2clientdata:
