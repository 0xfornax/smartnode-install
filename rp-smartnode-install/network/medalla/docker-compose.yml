version: "3.8"
services:
  eth1:
    image: ${ETH1_IMAGE}
    container_name: rocketpool_eth1
    restart: unless-stopped
    ports:
      - "30303-30305:30303-30305/udp"
      - "30303:30303/tcp"
    volumes:
      - eth1clientdata:/ethclient
      - ./chains/eth1:/setup:ro
    networks:
      - net
    environment:
      - CLIENT=${ETH1_CLIENT}
      - ETHSTATS_LABEL=${ETHSTATS_LABEL}
      - ETHSTATS_LOGIN=${ETHSTATS_LOGIN}
      - INFURA_PROJECT_ID=${INFURA_PROJECT_ID}
    entrypoint: sh
    command: "/setup/start-node.sh"
  eth2:
    image: ${ETH2_IMAGE}
    container_name: rocketpool_eth2
    restart: unless-stopped
    ports:
      - "9001:9001"
    volumes:
      - eth2clientdata:/ethclient
      - ./chains/eth2:/setup:ro
    networks:
      - net
    environment:
      - CLIENT=${ETH2_CLIENT}
    entrypoint: sh
    command: "/setup/start-beacon.sh"
    depends_on:
      - eth1
  validator:
    image: ${VALIDATOR_IMAGE}
    container_name: rocketpool_validator
    restart: unless-stopped
    volumes:
      - ./data:/data
      - ./chains/eth2:/setup:ro
    networks:
      - net
    environment:
      - CLIENT=${VALIDATOR_CLIENT}
    entrypoint: sh
    command: "/setup/start-validator.sh"
    depends_on:
      - eth2
  api:
    image: rocketpool/smartnode:v0.0.1
    container_name: rocketpool_api
    restart: unless-stopped
    volumes:
      - .:/.rocketpool
    networks:
      - net
    depends_on:
      - eth1
    entrypoint: /bin/sleep
    command: "infinity"
  node:
    image: rocketpool/smartnode:v0.0.1
    container_name: rocketpool_node
    restart: unless-stopped
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - .:/.rocketpool
    networks:
      - net
    command: "node"
    depends_on:
      - eth1
      - eth2
  watchtower:
    image: rocketpool/smartnode:v0.0.1
    container_name: rocketpool_watchtower
    restart: unless-stopped
    volumes:
      - .:/.rocketpool
    networks:
      - net
    command: "watchtower"
    depends_on:
      - eth1
      - eth2
networks:
  net:
volumes:
  eth1clientdata:
  eth2clientdata:
